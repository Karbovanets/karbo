
add_definitions(-DSTATICLIB)

if (ROCKSDB_FOUND)
  include_directories(${ROCKSDB_INCLUDE_DIR})
else()
  include_directories(${CMAKE_SOURCE_DIR}/external/rocksdb/include)
endif()

include_directories(${CMAKE_SOURCE_DIR}/external/linenoise)
include_directories(${CMAKE_SOURCE_DIR}/external/sqlite3)

file(GLOB_RECURSE BlockchainExplorer BlockchainExplorer/*)
file(GLOB_RECURSE Common Common/*)
file(GLOB_RECURSE ConnectivityTool ConnectivityTool/*)
file(GLOB_RECURSE Crypto crypto/*)
file(GLOB_RECURSE CryptoNoteCore CryptoNoteCore/* CryptoNoteConfig.h)
file(GLOB_RECURSE CryptoNoteProtocol CryptoNoteProtocol/*)
file(GLOB_RECURSE Daemon Daemon/*)
file(GLOB_RECURSE Http HTTP/*)
file(GLOB_RECURSE InProcessNode InProcessNode/*)
file(GLOB_RECURSE Logging Logging/*)
file(GLOB_RECURSE NodeRpcProxy NodeRpcProxy/*)
file(GLOB_RECURSE P2p P2p/*)
file(GLOB_RECURSE Rpc Rpc/*)
file(GLOB_RECURSE Serialization Serialization/*)
file(GLOB_RECURSE SimpleWallet SimpleWallet/*)
file(GLOB_RECURSE Mnemonics Mnemonics/*)
file(GLOB_RECURSE Transfers Transfers/*)
file(GLOB_RECURSE Wallet Wallet/*)
file(GLOB_RECURSE WalletLegacy WalletLegacy/*)
file(GLOB_RECURSE JsonRpcServer JsonRpcServer/*)
file(GLOB_RECURSE PaymentGate PaymentGate/*)
file(GLOB_RECURSE PaymentGateService PaymentGateService/*)
file(GLOB_RECURSE Miner Miner/*)
file(GLOB_RECURSE GreenWallet GreenWallet/*)

if (MSVC)
  file(GLOB_RECURSE System System/* Platform/Windows/System/*)
elseif (APPLE)
  file(GLOB_RECURSE System System/* Platform/OSX/System/* Platform/Posix/System/*)
elseif (FREEBSD)
  file(GLOB_RECURSE System System/* Platform/FreeBSD/System/* Platform/Posix/System/*)
elseif (ANDROID)
  file(GLOB_RECURSE System System/* Platform/Android/System/* Platform/Posix/System/*)
else()
  file(GLOB_RECURSE System System/* Platform/Linux/System/* Platform/Posix/System/*)
endif()

source_group("" FILES $${Common} ${ConnectivityTool} ${Crypto} ${CryptoNoteCore} ${CryptoNoteProtocol} ${Daemon} ${JsonRpcServer} ${Http} ${Logging} ${NodeRpcProxy} ${P2p} ${Rpc} ${Serialization} ${SimpleWallet} ${System} ${Transfers} ${Wallet} ${WalletLegacy} ${Mnemonics} ${GreenWallet})

add_library(BlockchainExplorer ${BlockchainExplorer})
add_library(CryptoNoteProtocol ${CryptoNoteProtocol})
add_library(Common ${Common})
add_library(Crypto ${Crypto})
add_library(CryptoNoteCore ${CryptoNoteCore})
add_library(Http ${Http})
add_library(InProcessNode ${InProcessNode})
add_library(Logging ${Logging})
add_library(Mnemonics ${Mnemonics})
add_library(NodeRpcProxy ${NodeRpcProxy})
add_library(Rpc ${Rpc})
add_library(P2P ${P2p})
add_library(Serialization ${Serialization})
add_library(System ${System})
add_library(Transfers ${Transfers})
add_library(Wallet ${Wallet} ${WalletLegacy})
add_library(PaymentGate ${PaymentGate})
add_library(JsonRpcServer ${JsonRpcServer})

list(APPEND KarboCommon Common)
list(APPEND KarboCore Rpc Http CryptoNoteCore Logging Serialization Crypto System)
list(APPEND KarboWallet Wallet Transfers NodeRpcProxy)
list(APPEND KarboLink P2P CryptoNoteProtocol BlockchainExplorer)
list(APPEND KarboPaymentGate PaymentGate JsonRpcServer InProcessNode)

if (MSVC)
  add_executable(Daemon ${Daemon} BinaryInfo/daemon.rc)
  add_executable(SimpleWallet ${SimpleWallet} BinaryInfo/simplewallet.rc)
  add_executable(PaymentGateService ${PaymentGateService} BinaryInfo/walletd.rc)
  add_executable(ConnectivityTool ${ConnectivityTool} BinaryInfo/connectivity_tool.rc)
  add_executable(Miner ${Miner} BinaryInfo/miner.rc)
  add_executable(GreenWallet ${GreenWallet} BinaryInfo/greenwallet.rc)
else()
  add_executable(Daemon ${Daemon})
  add_executable(SimpleWallet ${SimpleWallet})
  add_executable(PaymentGateService ${PaymentGateService})
  add_executable(ConnectivityTool ${ConnectivityTool})
  add_executable(Miner ${Miner})
  add_executable(GreenWallet ${GreenWallet})
endif()

# A bit of hackery so we don't have to do the if/else/ for every target that
# wants to use filesystem
add_library(__filesystem INTERFACE)

# Windows works out of the box
if (APPLE)
    target_link_libraries(__filesystem INTERFACE /usr/local/opt/llvm/lib/libc++fs.a)
elseif (UNIX)
    target_link_libraries(__filesystem INTERFACE stdc++fs)
endif()
target_link_libraries(Common __filesystem)

if (MSVC)
  if (ROCKSDB_FOUND)
    target_link_libraries(Daemon Rpcrt4 Shlwapi)
    target_link_libraries(PaymentGateService Rpcrt4 Shlwapi)
  else()
    target_link_libraries(Daemon Rpcrt4)
    target_link_libraries(PaymentGateService Rpcrt4)
  endif()
endif()
target_link_libraries(Daemon ${KarboCore} ${KarboLink} ${KarboCommon} upnpc-static sqlite3 ${Boost_LIBRARIES})
target_link_libraries(SimpleWallet ${KarboWallet} ${KarboCore} ${KarboLink} Mnemonics ${KarboCommon} upnpc-static ${Boost_LIBRARIES})
target_link_libraries(GreenWallet ${KarboWallet} ${KarboCore} ${KarboLink} Mnemonics ${KarboCommon} upnpc-static ${Boost_LIBRARIES})
target_link_libraries(Miner ${KarboCore} ${KarboCommon} ${Boost_LIBRARIES})
target_link_libraries(PaymentGateService ${KarboPaymentGate} ${KarboWallet} ${KarboCore}
                      ${KarboLink} ${KarboCommon} upnpc-static sqlite3 ${Boost_LIBRARIES})
target_link_libraries(ConnectivityTool ${KarboCore} ${KarboLink} ${KarboCommon} ${Boost_LIBRARIES})

if (MSVC)
  target_link_libraries(System ws2_32)
else()
  target_link_libraries(Daemon ${EXTRA_LIBRARIES})
  target_link_libraries(SimpleWallet ${EXTRA_LIBRARIES})
  target_link_libraries(PaymentGateService ${EXTRA_LIBRARIES})
  target_link_libraries(ConnectivityTool ${EXTRA_LIBRARIES})
  target_link_libraries(Miner ${EXTRA_LIBRARIES})
endif()

if (MSVC AND NOT ROCKSDB_FOUND)
  target_link_libraries(Daemon rocksdb)
  target_link_libraries(PaymentGateService rocksdb)
elseif(UNIX AND NOT ROCKSDB_FOUND)
  target_link_libraries(Daemon rocksdblib)
  target_link_libraries(PaymentGateService rocksdblib)
else()
  target_link_libraries(Daemon ${ROCKSDB_LIBRARIES})
  target_link_libraries(PaymentGateService ${ROCKSDB_LIBRARIES})
endif()

if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" OR APPLE AND NOT ANDROID)
  target_link_libraries(SimpleWallet -lresolv)
  target_link_libraries(Daemon -lresolv)
  target_link_libraries(PaymentGateService -lresolv)
  target_link_libraries(GreenWallet -lresolv)
endif()

if(FREEBSD)
  target_link_libraries(SimpleWallet -lthr)
  target_link_libraries(Daemon -lthr)
  target_link_libraries(PaymentGateService -lthr)
  target_link_libraries(Miner -lthr)
  target_link_libraries(GreenWallet -lthr)
endif()

add_dependencies(P2P version)
add_dependencies(Rpc version)
add_dependencies(CryptoNoteCore version)

set_property(TARGET ConnectivityTool PROPERTY OUTPUT_NAME "connectivity_tool")
set_property(TARGET Daemon PROPERTY OUTPUT_NAME "karbowanecd")
set_property(TARGET SimpleWallet PROPERTY OUTPUT_NAME "simplewallet")
set_property(TARGET PaymentGateService PROPERTY OUTPUT_NAME "walletd")
set_property(TARGET Miner PROPERTY OUTPUT_NAME "miner")
set_property(TARGET GreenWallet PROPERTY OUTPUT_NAME "greenwallet")

