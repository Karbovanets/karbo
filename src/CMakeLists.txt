
add_definitions(-DSTATICLIB)

include_directories(${CMAKE_SOURCE_DIR}/external/leveldb/include)
include_directories(${CMAKE_SOURCE_DIR}/external/linenoise)
include_directories(${CMAKE_SOURCE_DIR}/external/rocksdb/include)
include_directories(${CMAKE_SOURCE_DIR}/external/snappy)
include_directories(${CMAKE_SOURCE_DIR}/external/zstd)

file(GLOB_RECURSE BlockchainExplorer BlockchainExplorer/*)
file(GLOB_RECURSE Checkpoints Checkpoints/*)
file(GLOB_RECURSE Common Common/*)
file(GLOB_RECURSE Crypto crypto/*)
file(GLOB_RECURSE CryptoNoteCore CryptoNoteCore/* CryptoNoteConfig.h)
file(GLOB_RECURSE CryptoNoteProtocol CryptoNoteProtocol/*)
file(GLOB_RECURSE Daemon Daemon/*)
file(GLOB_RECURSE Http HTTP/*)
file(GLOB_RECURSE InProcessNode InProcessNode/*)
file(GLOB_RECURSE Logging Logging/*)
file(GLOB_RECURSE NodeRpcProxy NodeRpcProxy/*)
file(GLOB_RECURSE Optimizer Optimizer/*)
file(GLOB_RECURSE P2p P2p/*)
file(GLOB_RECURSE Rpc Rpc/*)
file(GLOB_RECURSE Serialization Serialization/*)
file(GLOB_RECURSE SimpleWallet SimpleWallet/*)
file(GLOB_RECURSE Mnemonics Mnemonics/*)
file(GLOB_RECURSE Transfers Transfers/*)
file(GLOB_RECURSE Wallet Wallet/*)
file(GLOB_RECURSE WalletLegacy WalletLegacy/*)
file(GLOB_RECURSE JsonRpcServer JsonRpcServer/*)
file(GLOB_RECURSE PaymentGate PaymentGate/*)
file(GLOB_RECURSE PaymentGateService PaymentGateService/*)
file(GLOB_RECURSE GreenWallet GreenWallet/*)
file(GLOB_RECURSE AddressGenerator AddressGenerator/*)

if (MSVC)
  file(GLOB_RECURSE System System/* Platform/Windows/System/*)
elseif (APPLE)
  file(GLOB_RECURSE System System/* Platform/OSX/System/* Platform/Posix/System/*)
elseif (FREEBSD)
  file(GLOB_RECURSE System System/* Platform/FreeBSD/System/* Platform/Posix/System/*)
elseif (ANDROID)
  file(GLOB_RECURSE System System/* Platform/Android/System/* Platform/Posix/System/*)
else()
  file(GLOB_RECURSE System System/* Platform/Linux/System/* Platform/Posix/System/*)
endif()

source_group("" FILES $${Common} ${Checkpoints} ${Crypto} ${CryptoNoteCore} ${CryptoNoteProtocol} ${Daemon} ${JsonRpcServer} ${GreenWallet} ${Http} ${Logging} ${Mnemonics} ${NodeRpcProxy} ${Optimizer} ${P2p} ${Rpc} ${Serialization} ${SimpleWallet} ${System} ${Transfers} ${Wallet} ${WalletLegacy} ${AddressGenerator})

add_library(BlockchainExplorer ${BlockchainExplorer})
add_library(Checkpoints ${Checkpoints})
add_library(CryptoNoteProtocol ${CryptoNoteProtocol})
add_library(Common ${Common})
add_library(Crypto ${Crypto})
add_library(CryptoNoteCore ${CryptoNoteCore})
add_library(Http ${Http})
add_library(InProcessNode ${InProcessNode})
add_library(Logging ${Logging})
add_library(Mnemonics ${Mnemonics})
add_library(NodeRpcProxy ${NodeRpcProxy})
add_library(Rpc ${Rpc})
add_library(P2P ${P2p})
add_library(Serialization ${Serialization})
add_library(System ${System})
add_library(Transfers ${Transfers})
add_library(Wallet ${Wallet} ${WalletLegacy})
add_library(PaymentGate ${PaymentGate})
add_library(JsonRpcServer ${JsonRpcServer})

list(APPEND KarboCommon Common)
list(APPEND KarboCore Rpc Http CryptoNoteCore Logging Serialization Crypto System Checkpoints)
list(APPEND KarboWallet Wallet Transfers NodeRpcProxy)
list(APPEND KarboLink P2P CryptoNoteProtocol BlockchainExplorer)
list(APPEND KarboPaymentGate PaymentGate JsonRpcServer InProcessNode)

if (MSVC)
  add_executable(Daemon ${Daemon} BinaryInfo/daemon.rc)
  add_executable(SimpleWallet ${SimpleWallet} BinaryInfo/simplewallet.rc)
  add_executable(GreenWallet ${GreenWallet} BinaryInfo/greenwallet.rc)
  add_executable(Optimizer ${Optimizer} BinaryInfo/optimizer.rc)
  add_executable(PaymentGateService ${PaymentGateService} BinaryInfo/walletd.rc)
  add_executable(AddressGenerator ${AddressGenerator} BinaryInfo/vanitygen.rc)
else()
  add_executable(Daemon ${Daemon})
  add_executable(SimpleWallet ${SimpleWallet})
  add_executable(GreenWallet ${GreenWallet})
  add_executable(Optimizer ${Optimizer})
  add_executable(PaymentGateService ${PaymentGateService})
  add_executable(AddressGenerator ${AddressGenerator})
endif()

if (MSVC)
  target_link_libraries(Daemon Rpcrt4 Shlwapi)
  target_link_libraries(PaymentGateService Rpcrt4 Shlwapi)
endif()
target_link_libraries(Daemon ${KarboCore} ${KarboLink} ${KarboCommon} upnpc-static ${Boost_LIBRARIES})
target_link_libraries(SimpleWallet ${KarboWallet} ${KarboCore} ${KarboLink} Mnemonics ${KarboCommon} upnpc-static ${Boost_LIBRARIES})
target_link_libraries(GreenWallet ${KarboWallet} ${KarboCore} ${KarboLink} Mnemonics ${KarboCommon} upnpc-static ${Boost_LIBRARIES})
target_link_libraries(Optimizer PaymentGate ${KarboCore} ${KarboCommon} ${Boost_LIBRARIES})
target_link_libraries(PaymentGateService ${KarboPaymentGate} ${KarboWallet} ${KarboCore} ${KarboLink} ${KarboCommon} upnpc-static ${Boost_LIBRARIES})
target_link_libraries(AddressGenerator ${KarboCore} Mnemonics ${KarboCommon} ${Boost_LIBRARIES})

if (MSVC)
  target_link_libraries(System ws2_32)
  target_link_libraries(Daemon Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
  target_link_libraries(SimpleWallet Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
  target_link_libraries(GreenWallet Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
  target_link_libraries(PaymentGateService Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
  target_link_libraries(Optimizer Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
  target_link_libraries(AddressGenerator Rpcrt4 ws2_32 advapi32 crypt32 gdi32 user32)
else()
  target_link_libraries(Daemon ${EXTRA_LIBRARIES})
  target_link_libraries(SimpleWallet ${EXTRA_LIBRARIES})
  target_link_libraries(GreenWallet ${EXTRA_LIBRARIES})
  target_link_libraries(Optimizer ${EXTRA_LIBRARIES})
  target_link_libraries(PaymentGateService ${EXTRA_LIBRARIES})
  target_link_libraries(AddressGenerator ${EXTRA_LIBRARIES})
endif()

if (MSVC)
  target_link_libraries(Daemon rocksdb zstd leveldb snappy)
  target_link_libraries(PaymentGateService rocksdb zstd leveldb snappy)
elseif(UNIX)
  target_link_libraries(Daemon rocksdblib zstd leveldblib snappy)
  target_link_libraries(PaymentGateService rocksdblib zstd leveldblib snappy)
endif()

if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" OR APPLE AND NOT ANDROID)
  target_link_libraries(SimpleWallet -lresolv)
  target_link_libraries(Daemon -lresolv)
  target_link_libraries(PaymentGateService -lresolv)
  target_link_libraries(GreenWallet -lresolv)
  target_link_libraries(AddressGenerator -lresolv)
endif()

if(FREEBSD)
  target_link_libraries(SimpleWallet -lthr)
  target_link_libraries(Daemon -lthr)
  target_link_libraries(PaymentGateService -lthr)
  target_link_libraries(GreenWallet -lthr)
  target_link_libraries(AddressGenerator -lthr)
endif()

if (OPENSSL_FOUND)
    target_link_libraries(Daemon ${OPENSSL_LIBRARIES})
    target_link_libraries(SimpleWallet ${OPENSSL_LIBRARIES})
    target_link_libraries(GreenWallet ${OPENSSL_LIBRARIES})
    target_link_libraries(Optimizer ${OPENSSL_LIBRARIES})
    target_link_libraries(PaymentGateService ${OPENSSL_LIBRARIES})
	target_link_libraries(AddressGenerator ${OPENSSL_LIBRARIES})

  # prevent error LNK2019: unresolved external symbol _vsnprintf
  if(MSVC AND NOT (MSVC_VERSION LESS 1900))
    target_link_libraries(Daemon "legacy_stdio_definitions.lib")
    target_link_libraries(SimpleWallet "legacy_stdio_definitions.lib")
    target_link_libraries(GreenWallet "legacy_stdio_definitions.lib")
    target_link_libraries(PaymentGateService "legacy_stdio_definitions.lib")
    target_link_libraries(Optimizer "legacy_stdio_definitions.lib")
    target_link_libraries(AddressGenerator "legacy_stdio_definitions.lib")
  endif()
endif ()

add_dependencies(P2P version)
add_dependencies(Rpc version)
add_dependencies(PaymentGate version)
add_dependencies(CryptoNoteCore version)
add_dependencies(InProcessNode version)

set_property(TARGET Daemon PROPERTY OUTPUT_NAME "karbowanecd")
set_property(TARGET SimpleWallet PROPERTY OUTPUT_NAME "simplewallet")
set_property(TARGET GreenWallet PROPERTY OUTPUT_NAME "greenwallet")
set_property(TARGET Optimizer PROPERTY OUTPUT_NAME "optimizer")
set_property(TARGET PaymentGateService PROPERTY OUTPUT_NAME "walletd")
set_property(TARGET AddressGenerator PROPERTY OUTPUT_NAME "vanitygen")
