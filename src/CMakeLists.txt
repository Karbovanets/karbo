add_definitions(-DSTATICLIB)

if (ROCKSDB_FOUND)
  include_directories(${ROCKSDB_INCLUDE_DIR})
else()
  include_directories(${CMAKE_SOURCE_DIR}/external/rocksdb/include)
endif()

include_directories(${CMAKE_SOURCE_DIR}/external/linenoise)

file(GLOB_RECURSE BlockchainExplorer BlockchainExplorer/*)
file(GLOB_RECURSE Common Common/*)
file(GLOB_RECURSE ConnectivityTool ConnectivityTool/*)
file(GLOB_RECURSE Crypto crypto/*)
file(GLOB_RECURSE CryptoNoteCore CryptoNoteCore/* CryptoNoteConfig.h)
file(GLOB_RECURSE CryptoNoteProtocol CryptoNoteProtocol/*)
file(GLOB_RECURSE Daemon Daemon/*)
file(GLOB_RECURSE Http HTTP/*)
file(GLOB_RECURSE InProcessNode InProcessNode/*)
file(GLOB_RECURSE Logging Logging/*)
file(GLOB_RECURSE NodeRpcProxy NodeRpcProxy/*)
file(GLOB_RECURSE P2p P2p/*)
file(GLOB_RECURSE Rpc Rpc/*)
file(GLOB_RECURSE Serialization Serialization/*)
file(GLOB_RECURSE SimpleWallet SimpleWallet/*)
file(GLOB_RECURSE Mnemonics Mnemonics/*)

if (MSVC)
  file(GLOB_RECURSE System System/* Platform/Windows/System/*)
elseif (APPLE)
  file(GLOB_RECURSE System System/* Platform/OSX/System/* Platform/Posix/System/*)
elseif (FREEBSD)
  file(GLOB_RECURSE System System/* Platform/FreeBSD/System/* Platform/Posix/System/*)
elseif (ANDROID)
  file(GLOB_RECURSE System System/* Platform/Android/System/* Platform/Posix/System/*)
else()
  file(GLOB_RECURSE System System/* Platform/Linux/System/* Platform/Posix/System/*)
endif()

file(GLOB_RECURSE Transfers Transfers/*)
file(GLOB_RECURSE Wallet Wallet/*)
file(GLOB_RECURSE WalletLegacy WalletLegacy/*)

file(GLOB_RECURSE JsonRpcServer JsonRpcServer/*)

file(GLOB_RECURSE PaymentGate PaymentGate/*)
file(GLOB_RECURSE PaymentGateService PaymentGateService/*)
file(GLOB_RECURSE Miner Miner/*)
file(GLOB_RECURSE GreenWallet GreenWallet/*)

source_group("" FILES $${Common} ${ConnectivityTool} ${Crypto} ${CryptoNoteCore} ${CryptoNoteProtocol} ${Daemon} ${JsonRpcServer} ${Http} ${Logging} ${NodeRpcProxy} ${P2p} ${Rpc} ${Serialization} ${SimpleWallet} ${System} ${Transfers} ${Wallet} ${WalletLegacy} ${Mnemonics} ${GreenWallet})

add_library(BlockchainExplorer ${BlockchainExplorer})
add_library(CryptoNoteProtocol ${CryptoNoteProtocol})
add_library(Common ${Common})
add_library(Crypto ${Crypto})
add_library(CryptoNoteCore ${CryptoNoteCore})
add_library(Http ${Http})
add_library(InProcessNode ${InProcessNode})
add_library(Logging ${Logging})
add_library(Mnemonics ${Mnemonics})
add_library(NodeRpcProxy ${NodeRpcProxy})
add_library(Rpc ${Rpc})
add_library(P2P ${CryptoNoteProtocol} ${P2p})
add_library(Serialization ${Serialization})
add_library(System ${System})
add_library(Transfers ${Transfers})
add_library(Wallet ${Wallet} ${WalletLegacy})
add_library(PaymentGate ${PaymentGate})
add_library(JsonRpcServer ${JsonRpcServer})

if (MSVC)
add_executable(Daemon ${Daemon} BinaryInfo/daemon.rc)
add_executable(SimpleWallet ${SimpleWallet} BinaryInfo/simplewallet.rc)
add_executable(PaymentGateService ${PaymentGateService} BinaryInfo/walletd.rc)
add_executable(ConnectivityTool ${ConnectivityTool} BinaryInfo/connectivity_tool.rc)
add_executable(Miner ${Miner} BinaryInfo/miner.rc)
add_executable(GreenWallet ${GreenWallet} BinaryInfo/greenwallet.rc)
else()
add_executable(Daemon ${Daemon})
add_executable(SimpleWallet ${SimpleWallet})
add_executable(PaymentGateService ${PaymentGateService})
add_executable(ConnectivityTool ${ConnectivityTool})
add_executable(Miner ${Miner})
add_executable(GreenWallet ${GreenWallet})
endif()

if (MSVC)
  target_link_libraries(System ws2_32)
  if (ROCKSDB_FOUND)
    target_link_libraries(Daemon Rpcrt4 Shlwapi)
    target_link_libraries(PaymentGateService Rpcrt4 Shlwapi)
  else()
    target_link_libraries(Daemon Rpcrt4)
    target_link_libraries(PaymentGateService Rpcrt4)
  endif()
endif()

target_link_libraries(CryptoNoteCore Common Crypto Logging Serialization)
target_link_libraries(P2P CryptoNoteCore Logging ${Boost_LIBRARIES} upnpc-static)
target_link_libraries(Rpc CryptoNoteCore Logging P2P)

if (UNIX)
target_link_libraries(ConnectivityTool CryptoNoteCore Logging Crypto P2P Rpc Http Serialization Common System ${Boost_LIBRARIES} ${EXTRA_LIBRARIES})
target_link_libraries(Daemon Rpc CryptoNoteCore P2P System Http Logging Common Crypto upnpc-static BlockchainExplorer ${Boost_LIBRARIES} Serialization ${EXTRA_LIBRARIES})
target_link_libraries(SimpleWallet Wallet NodeRpcProxy Transfers Rpc Http CryptoNoteCore System Logging Common Crypto ${Boost_LIBRARIES} Serialization Mnemonics ${EXTRA_LIBRARIES})
target_link_libraries(PaymentGateService PaymentGate JsonRpcServer Wallet NodeRpcProxy Transfers CryptoNoteCore Crypto P2P Rpc Http System Logging Common InProcessNode upnpc-static BlockchainExplorer ${Boost_LIBRARIES} Serialization ${EXTRA_LIBRARIES})
target_link_libraries(Miner CryptoNoteCore Rpc System Http Logging Common Crypto ${Boost_LIBRARIES} Serialization ${EXTRA_LIBRARIES})
endif()

target_link_libraries(ConnectivityTool CryptoNoteCore Common Logging Crypto P2P Rpc Http Serialization System ${Boost_LIBRARIES})

if (MSVC AND NOT ROCKSDB_FOUND)
  target_link_libraries(Daemon P2P Rpc Serialization System Http Logging CryptoNoteCore Crypto Common upnpc-static rocksdb ${Boost_LIBRARIES})
elseif(UNIX AND NOT ROCKSDB_FOUND)
  target_link_libraries(Daemon P2P Rpc Serialization System Http Logging CryptoNoteCore Crypto Common upnpc-static rocksdblib ${Boost_LIBRARIES})
else()
  target_link_libraries(Daemon P2P Rpc Serialization System Http Logging CryptoNoteCore Crypto Common upnpc-static ${ROCKSDB_LIBRARIES} ${Boost_LIBRARIES})
endif()

target_link_libraries(SimpleWallet Wallet NodeRpcProxy Transfers Rpc P2P upnpc-static Http Serialization CryptoNoteCore System Logging Common Crypto Mnemonics ${Boost_LIBRARIES})

if (MSVC AND NOT ROCKSDB_FOUND)
  target_link_libraries(PaymentGateService PaymentGate JsonRpcServer Wallet NodeRpcProxy Transfers P2P CryptoNoteCore Crypto Rpc Http Serialization System Logging Common InProcessNode upnpc-static BlockchainExplorer rocksdb ${Boost_LIBRARIES})
elseif (UNIX AND NOT ROCKSDB_FOUND)
  target_link_libraries(PaymentGateService PaymentGate JsonRpcServer Wallet NodeRpcProxy Transfers P2P CryptoNoteCore Crypto Rpc Http Serialization System Logging Common InProcessNode upnpc-static BlockchainExplorer rocksdblib ${Boost_LIBRARIES})
else()
  target_link_libraries(PaymentGateService PaymentGate JsonRpcServer Wallet NodeRpcProxy Transfers P2P CryptoNoteCore Crypto Rpc Http Serialization System Logging Common InProcessNode upnpc-static BlockchainExplorer ${ROCKSDB_LIBRARIES} ${Boost_LIBRARIES})
endif()

target_link_libraries(Miner CryptoNoteCore Rpc Serialization System Http Logging Common Crypto ${Boost_LIBRARIES})
target_link_libraries(GreenWallet Mnemonics Wallet NodeRpcProxy Transfers Rpc Http CryptoNoteCore System Logging Common ${Boost_LIBRARIES} Serialization Crypto)

if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux" OR APPLE AND NOT ANDROID)
  target_link_libraries(SimpleWallet -lresolv)
  target_link_libraries(Daemon -lresolv)
  target_link_libraries(PaymentGateService -lresolv)
  target_link_libraries(GreenWallet -lresolv)
endif()

if(FREEBSD)
  target_link_libraries(SimpleWallet -lthr)
  target_link_libraries(Daemon -lthr)
  target_link_libraries(PaymentGateService -lthr)
  target_link_libraries(Miner -lthr)
  target_link_libraries(GreenWallet -lthr)
endif()

add_dependencies(Rpc version)

add_dependencies(ConnectivityTool version)
add_dependencies(Daemon version)
add_dependencies(SimpleWallet version)
add_dependencies(PaymentGateService version)
add_dependencies(P2P version)
add_dependencies(GreenWallet version)

set_property(TARGET ConnectivityTool PROPERTY OUTPUT_NAME "connectivity_tool")

set_property(TARGET Daemon PROPERTY OUTPUT_NAME "karbowanecd")

set_property(TARGET SimpleWallet PROPERTY OUTPUT_NAME "simplewallet")
set_property(TARGET PaymentGateService PROPERTY OUTPUT_NAME "walletd")
set_property(TARGET Miner PROPERTY OUTPUT_NAME "miner")
set_property(TARGET GreenWallet PROPERTY OUTPUT_NAME "greenwallet")
